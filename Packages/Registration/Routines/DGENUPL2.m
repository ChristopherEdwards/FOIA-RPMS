DGENUPL2 ;ALB/CJM,RTK,ISA/KWP/RMM/CKN - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 1/23/01 12:56pm
 ;;5.3;REGISTRATION;**147,222,232,310,314,367,397**;Aug 13,1993
 ;
 ;
 ;***************************************************************
 ;The following procedures parse particular segment types.
 ;Input:SEG(),MSGID
 ;Output:DGPAT(),DGELG(),DGENR(),DGCDIS(),DGNTR(),ERROR
 ;***************************************************************
 ;
PID ;
 S DGPAT("SSN")=SEG(19)
 Q
 ;
ZPD ;
 S DGELG("RATEINC")=$$CONVERT^DGENUPL1(SEG(8))
 S DGPAT("DEATH")=$$CONVERT^DGENUPL1(SEG(9),"TS",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZPD SEGMENT, SEQ 9",.ERRCOUNT)
 S DGELG("MEDICAID")=$$CONVERT^DGENUPL1(SEG(12))
 S DGELG("POW")=$$CONVERT^DGENUPL1(SEG(17))
 Q
 ;
ZIE ;
 S DGPAT("INELDATE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZIE SEGMENT, SEQ 2",.ERRCOUNT)
 S DGPAT("INELREA")=$$CONVERT^DGENUPL1(SEG(3))
 S DGPAT("INELDEC")=$$CONVERT^DGENUPL1(SEG(4))
 Q
 ;
ZEL(COUNT) ;
 D ZEL^DGENUPLA(COUNT)  ;code for ZEL segment has moved to DGENUPLA
 Q
 ;
ZEN ;
 N SUB
 S DGENR("DATE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 2",.ERRCOUNT)
 S DGENR("SOURCE")=$$CONVERT^DGENUPL1(SEG(3))
 S DGENR("STATUS")=$$CONVERT^DGENUPL1(SEG(4))
 S DGENR("REASON")=$$CONVERT^DGENUPL1(SEG(5))
 S DGENR("REMARKS")=$$CONVERT^DGENUPL1(SEG(6))
 S DGENR("FACREC")=$$CONVERT^DGENUPL1(SEG(7),"INSTITUTION",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"FACILITY RECEIVED "_SEG(7)_" NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
 S DGPAT("PREFAC")=$$CONVERT^DGENUPL1(SEG(8),"INSTITUTION",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"PREFERRED FACILITY "_SEG(8)_" NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
 ;
 S DGENR("PRIORITY")=$$CONVERT^DGENUPL1(SEG(9))
 S DGENR("EFFDATE")=$$CONVERT^DGENUPL1(SEG(10),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 10",.ERRCOUNT)
 S DGENR("APP")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 11",.ERRCOUNT)
 ;
 ;!!!!!!!!! take this next line out when HEC begins transmitting the applicatizon date
 I DGENR("APP")="" S DGENR("APP")=DGENR("DATE")
 I DGENR("APP")="" S DGENR("APP")=DGENR("EFFDATE")
 ;
 S DGENR("END")=$$CONVERT^DGENUPL1(SEG(12),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 12",.ERRCOUNT)
 ;Phase II Parse out Sub-Group (SRS 6.4)
 S DGENR("SUBGRP")=$$CONVERT^DGENUPL1(SEG(13))
 ;
 ;want to ignore double quotes sent for enrollment fields
 S SUB=""
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  I DGENR(SUB)="@" S DGENR(SUB)=""
 ;
 Q
 ;
ZMT ;
 I SEG(1)>1 D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ZMT SEGMENT, SEQ 1, SHOULD SPECIFY MEANS TEST",.ERRCOUNT) S ERROR=1 Q
 S DGELG("MTSTA")=$$CONVERT^DGENUPL1(SEG(3),"MT",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMT SEGMENT, SEQ 3",.ERRCOUNT)
 Q
 ;
ZCD ;
 ;Phase II for multiple ZCD's
 I SEG(1)>1 G SKIP
 S DGCDIS("BY")=$$CONVERT^DGENUPL1(SEG(3))
 S DGCDIS("DATE")=$$CONVERT^DGENUPL1(SEG(5),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 5",.ERRCOUNT)
 S DGCDIS("FACDET")=$$CONVERT^DGENUPL1(SEG(4),"INSTITUTION",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"FACILITY "_SEG(4)_" MAKING CATASTROPHIC DISABILITY DETERMINATION NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
 S DGCDIS("REVDTE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 2",.ERRCOUNT)
 S DGCDIS("METDET")=$$CONVERT^DGENUPL1($P(SEG(6),$E(HLECH)))
 S DGCDIS("VCD")=$$CONVERT^DGENUPL1(SEG(12))
SKIP ;
 ;Phase II Parse out additional fields.  CONVERT type of RSN converts the code to IEN for diagnosis,procedure and condition (HL7TORSN^DGENA5).
 S DGCDIS("DIAG",SEG(1))=$$CONVERT^DGENUPL1(SEG(7),"CDRSN")
 S DGCDIS("PROC",SEG(1))=$$CONVERT^DGENUPL1(SEG(8),"CDRSN")
 S DGCDIS("EXT",SEG(1))=$$CONVERT^DGENUPL1($P(SEG(9),$E(HLECH)),"EXT")
 S DGCDIS("COND",SEG(1))=$$CONVERT^DGENUPL1(SEG(10),"CDRSN")
 S DGCDIS("SCORE",SEG(1))=$$CONVERT^DGENUPL1($P(SEG(11),$E(HLECH)))
 S DGCDIS("PERM",SEG(1))=$$CONVERT^DGENUPL1($P(SEG(13),$E(HLECH)))
 I DGCDIS("VCD")="Y",'DGCDIS("DIAG",SEG(1)),'DGCDIS("PROC",SEG(1)),'DGCDIS("COND",SEG(1)) D  Q
 .S ERROR=1 D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"NO VALID DIAGNOSIS,PROCEDURE, OR CONDITION IN THE ZCD SEGMENT",.ERRCOUNT)
 Q
 ;
ZSP ;
 S DGELG("SC")=$$CONVERT^DGENUPL1(SEG(2),"Y/N",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 2",.ERRCOUNT)
 S DGELG("SCPER")=$$CONVERT^DGENUPL1(SEG(3))
 ;
 ;added 8/3/98 to reduce #rejects
 ;if HEC sends SC=NO, SC% not sent, and site has value for SC% then delete it
 I DGELG("SC")="N",DGELG("SCPER")="" S DGELG("SCPER")="@"
 ;
 S DGELG("P&T")=$$CONVERT^DGENUPL1(SEG(6),"Y/N",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 6",.ERRCOUNT)
 S DGELG("UNEMPLOY")=$$CONVERT^DGENUPL1(SEG(7),"Y/N",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 7",.ERRCOUNT)
 S DGELG("SCAWDATE")=$$CONVERT^DGENUPL1(SEG(8),"DATE",.ERROR)
 I ERROR D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 8",.ERRCOUNT)
 Q
 ;
ZMH ; Purple Heart
 Q:SEG(2)'="PH"      ;ONLY PROCESS PURPLE HEART FROM ZMH
 S DGPAT("PHI")=$P(SEG(3),$E(HLECH))
 S DGELG("PH")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))
 S DGPAT("PHST")=$P(SEG(3),$E(HLECH),2)
 S DGPAT("PHRR")=$P(SEG(3),$E(HLECH),3)
 Q
 ;
ZRD ;
 N COUNT,DXCODE,NAME,COND
 S DXCODE=$P(SEG(2),$E(HLECH))
 I DXCODE="""""" S DXCODE=""
 S NAME=$P(SEG(2),$E(HLECH),2)
 Q:DXCODE=""  ;segment does not contain a disability condition
 ;
 S COUNT=1+(+$G(DGELG("RATEDIS")))
 S (COND,DGELG("RATEDIS",COUNT,"RD"))=$$DCLOOKUP(DXCODE,NAME)
 S DGELG("RATEDIS",COUNT,"PER")=SEG(3),DGELG("RATEDIS")=COUNT
 I 'COND D  Q
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZRD SEGMENT, SEQ 2 - DISABILTY CONDITION LOOKUP FAILED",.ERRCOUNT)
 .S ERROR=1
 Q
 ;
OBX ;
 D OBX^DGENUPLA  ;code for OBX segment has moved to DGENUPLA
 Q
 ;
 ;
 ;*********** end of segment parsers ****
 ;
 ;
DCLOOKUP(DXCODE,NAME) ;
 ;Description: Returns the ien of an Disability Condition (file #31) based on the DXCODE and NAME
 ;
 ;Input:
 ;  DXCODE - the DX Code of the Disability Condition
 ;  NAME - the name of the Disability Condition
 ;Output:
 ;  Function Value: the ien of the entry found, or 0 otherwise
 ;
 Q:(DXCODE="") 0
 N NODE,IEN,FOUND
 S (FOUND,IEN)=0
 F  S IEN=$O(^DIC(31,"C",DXCODE,IEN)) Q:'IEN  D  Q:FOUND
 .S NODE=$G(^DIC(31,IEN,0))
 .I NAME=$P(NODE,"^"),DXCODE=$P(NODE,"^",3) S FOUND=1
 I 'FOUND S IEN=$O(^DIC(31,"C",DXCODE,0))
 Q +IEN
 ;
REGCHECK(DFN) ;
 ;Description: passes patient through the registration consistency checker
 ;Input -
 ;  DFN is a pointer to the Patient File
 ;
 N DGCD,DGCHK,DGDAY,DGEDCN,DGER,DGLST,DGNCK,DGRPCOLD,DGSC,DGTYPE,DGVT,VA,X
 ;
 S DGEDCN=0
 D ^DGRPC
 Q
